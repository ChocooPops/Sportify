ALTER TABLE EVENEMENT DROP CONSTRAINT FK_ADMIN_EVENT;
DROP TABLE EVENEMENT;

ALTER TABLE POST DROP CONSTRAINT FK_USERID; 
DROP TABLE POST; 

DROP TABLE USER_ADMIN; 

ALTER TABLE PRONOSTIC DROP CONSTRAINT FK_PRONOSTIQUEUR; 
ALTER TABLE PRONOSTIC DROP CONSTRAINT FK_MATCH; 
DROP TABLE PRONOSTIC; 

DROP TABLE ADMINISTRATEUR;
DROP TABLE MATCH;
DROP TABLE UTILISATEUR;
COMMIT; 

CREATE TABLE UTILISATEUR (
    UTILISATEUR_ID INT NOT NULL,
    PSEUDO VARCHAR2(255) NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    POINT_ACTUEL INT DEFAULT 0,
    POINT_CLASSEMENT INT DEFAULT 0,
    STATUS VARCHAR2(255) NOT NULL,
    SCORE_JEU INT DEFAULT 0,
    NB_POST INT DEFAULT 0,
    CONSTRAINT PK_USER PRIMARY KEY (UTILISATEUR_ID),
    CONSTRAINT U_PS UNIQUE (PSEUDO),
    CONSTRAINT U_E UNIQUE (EMAIL)
);
COMMIT; 

CREATE TABLE POST (
    POST_ID INT NOT NULL,
    AUTEUR_ID INT NOT NULL,
    NOM_TOPIC VARCHAR2(255) NOT NULL,
    DESCRIPTION_POST VARCHAR2(255) DEFAULT ' ',
    NB_LIKE INT DEFAULT 0,
    CONSTRAINT PK_POST PRIMARY KEY(POST_ID),
    CONSTRAINT FK_USERID FOREIGN KEY(AUTEUR_ID) REFERENCES UTILISATEUR(UTILISATEUR_ID)
);
COMMIT; 
CREATE TABLE MATCH (
    MATCH_ID INT NOT NULL,
    EQUIPE_DOMICILE VARCHAR2(255) NOT NULL,  
    EQUIPE_EXTERIEUR VARCHAR2(255) NOT NULL, 
    CONSTRAINT PK_MATCH PRIMARY KEY(MATCH_ID) 
); 
COMMIT; 
CREATE TABLE PRONOSTIC(
    PRONOSTIC_ID INT NOT NULL, 
    PRONOSTIQUEUR_ID INT NOT NULL,
    MATCH_ID INT NOT NULL, 
    PRONOSTIQUE_EQUIPE_GAGNANTE INT NOT NULL, 
    PRONOSTIQUE_EQUIPE_PERDANTE INT NOT NULL, 
    DATE_PRONO DATE NOT NULL, 
    MISE INT DEFAULT 0, 
    STATUS VARCHAR2(255) NOT NULL,
    CONSTRAINT PK_PRONO PRIMARY KEY(PRONOSTIC_ID), 
    CONSTRAINT FK_PRONOSTIQUEUR FOREIGN KEY(PRONOSTIQUEUR_ID) REFERENCES UTILISATEUR(UTILISATEUR_ID), 
    CONSTRAINT FK_MATCH FOREIGN KEY(MATCH_ID) REFERENCES MATCH(MATCH_ID)
); 
COMMIT; 

CREATE TABLE ADMINISTRATEUR(
    ADMIN_ID INT NOT NULL, 
    CONSTRAINT PK_ADMIN PRIMARY KEY(ADMIN_ID)
); 
COMMIT; 

CREATE TABLE USER_ADMIN(
    USER_ID INT NOT NULL, 
    ADMIN_ID INT NOT NULL, 
    CONSTRAINT PK_USER_ADMIN PRIMARY KEY (USER_ID, ADMIN_ID),
    CONSTRAINT FK_USER FOREIGN KEY(USER_ID) REFERENCES UTILISATEUR(UTILISATEUR_ID), 
    CONSTRAINT FK_ADMIN FOREIGN KEY(ADMIN_ID) REFERENCES ADMINISTRATEUR(ADMIN_ID)
); 
COMMIT; 

CREATE TABLE EVENEMENT(
    EVENEMENT_ID INT NOT NULL, 
    ADMIN_ID INT NOT NULL, 
    NOM_EVENEMENT VARCHAR2(255) NOT NULL, 
    LIEU_EVENEMENT VARCHAR2(255) NOT NULL, 
    DATE_EVENEMENT DATE NOT NULL, 
    DESCRIPTION_EVENT VARCHAR(255) DEFAULT ' ', 
    DUREE INT NOT NULL,
    CONSTRAINT PK_EVENT PRIMARY KEY(EVENEMENT_ID),
    CONSTRAINT FK_ADMIN_EVENT FOREIGN KEY(ADMIN_ID) REFERENCES ADMINISTRATEUR(ADMIN_ID) 
);
COMMIT;

CREATE OR REPLACE TRIGGER UPDATE_NB_POST
AFTER INSERT OR DELETE ON POST
FOR EACH ROW
/*MODIFIER LE NOMBRE DE POSTE DE L'UTILISTEUR A CHAQUE FOIS QU'UN NOUVEAU POSTE EST INSERE OU SUPPRIMER*/
BEGIN
    IF INSERTING THEN 
        UPDATE UTILISATEUR SET
            NB_POST = NB_POST + 1 where UTILISATEUR_ID = :NEW.AUTEUR_ID; 
    ELSE 
        UPDATE UTILISATEUR SET
            NB_POST = NB_POST - 1 where UTILISATEUR_ID = :OLD.AUTEUR_ID;
    END IF; 
END; 